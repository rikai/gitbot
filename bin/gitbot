#!/usr/bin/env ruby

require "date"
require "cinch"
require "sinatra"
require "yaml"
require "json"
require_relative "git-io"
require 'dotenv'
require 'openssl'

###################
# Loading Configs #
###################

config_file = ARGV.shift || "config.yml"
if not File.exists? config_file
  puts "Can't find config file #{config_file}"
  puts "Either create it or specify another config file with: #{File.basename $0} [filename]"
  exit
end

$config = YAML.load_file config_file

$bot = Cinch::Bot.new do
  configure do |c|
    c.nick = $config["irc"]["nick"]
    c.user = $config["irc"]["user"]
    c.realname = $config["irc"]["realname"]
    c.server = $config["irc"]["server"]
    c.port = $config["irc"]["port"]
    c.channels = $config["irc"]["channels"]
  end
end

Thread.new do
  $bot.start
end

Dotenv.load

##############
# IRC Output #
##############

def say(repo,msg)
  $config["irc"]["channels"].each do |chan|
    unless $config["filters"].include? chan and not $config["filters"][chan].include? repo
      $bot.Channel(chan).send msg
    end
  end
end

################
# Verification #
################

def verify_signature(payload_body)
  signature = 'sha1=' + OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha1'), $config["github"]["secret"], payload_body)
  return halt 500, "Signature mosmatch" unless Rack::Utils.secure_compare(signature, request.env['HTTP_X_HUB_SIGNATURE'])
end

def ignored?(event, data)
  return false unless $config.key?(:ignore) && $config[:ignore].key?(event)
  return true if $config[:ignore][event].empty?
  match = (event == 'create' || event == 'delete') ? :ref_type : :action
  return true if $config[:ignore][event].include? data[match]
  false
end

##############
# Formatting #
##############

## TODO: Combine these where possible

def format_repo(data)
  Cinch::Formatting.format(:green, "#{data["repository"]["name"]}")
end

def format_author(data)
  Cinch::Formatting.format(:silver, "#{data["sender"]["login"]}")
end

def format_branch(data)
  Cinch::Formatting.format(:orange, "#{data["ref"].gsub(/^refs\/heads\//,"")}")
end

def format_commit(c)
  Cinch::Formatting.format(:grey, "#{c["id"][0..7]}")
end

def format_cauthor(c)
  Cinch::Formatting.format(:silver, "#{c["author"]["username"]}")
end

def format_prtitle(data)
  Cinch::Formatting.format(:teal, "#{data["pull_request"]["title"]}")
end

def format_prnumber(data)
  Cinch::Formatting.format(:orange, "##{data["pull_request"]["number"]}")
end

def format_prhead(data)
  Cinch::Formatting.format(:red, "#{data["pull_request"]["head"]["ref"]}")
end

def format_prbase(data)
 Cinch::Formatting.format(:red, "#{data["pull_request"]["base"]["ref"]}")
end

def format_issuenumber(data)
  Cinch::Formatting.format(:orange, "##{data["issue"]["number"]}")
end

def format_issuetitle(data)
  Cinch::Formatting.format(:teal, "#{data["issue"]["title"]}")
end

def format_issueassigner(data)
  Cinch::Formatting.format(:silver, "#{data["issue"]["user"]["login"]}")
end

def format_issueassignee(data)
  Cinch::Formatting.format(:silver, "#{data["assignee"]["login"]}")
end

#####################
# Git.io generation #
#####################

## TODO: Combine these

def format_commiturl(data)
  Git.io.generate data["compare"]
end

def format_prurl(data)
  Git.io.generate data["pull_request"]["html_url"]
end


def format_issueurl(data)
  Git.io.generate data["issue"]["html_url"]
end

def format_commenturl(data)
  Git.io.generate data["comment"]["html_url"]
end

##################
# Received Hooks #
##################

## Documented @ https://developer.github.com/v3/activity/events/types/
## TODO: Add more hooks, add placeholders, consolidate repo variable

# Created {repository, branch, tag}

def get_create(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Create: Not yet implemented, how pitiful."
end

# Deleted {branch, tag}

def get_delete(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Delete: Not yet implemented, how pitiful."
end

# Deployments

def get_deployment(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Deployment: Not yet implemented, how pitiful."
end

# Deployment Status

def get_deployment_status(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Deployment Status: Not yet implemented, how pitiful."
end

# Downloads

def get_download(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Download: Not yet implemented, how pitiful."
end

# When a user follows another user. (Deprecated?)

def get_follow(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Follow: Not yet implemented, how pitiful."
end

# Forked Repo

def get_fork(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Fork: Not yet implemented, how pitiful."
end

# Wiki {Created, Updated}

def get_gollum(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Gollum/Wiki: Not yet implemented, how pitiful."
end

# Comment on {issue}

def get_issue_comment(data)
  repo = data["repository"]["name"]
  action = data["action"]

  if action.match(/^created$/)
    say repo, "#{Cinch::Formatting.format(:Black, '[')}" + format_repo(data) + "#{Cinch::Formatting.format(:Black, ']')} " + format_author(data) + " added a comment to " + format_issuenumber(data) + ": " + format_issuetitle(data) + " @ " + format_commenturl(data)
  elsif action.match(/^edited$/)
    say repo, "#{Cinch::Formatting.format(:Black, '[')}" + format_repo(data) + "#{Cinch::Formatting.format(:Black, ']')} " + format_author(data) + " #{data["action"]} a comment on " + format_issuenumber(data) + ": " + format_issuetitle(data) + " @ " + format_commenturl(data)
  else action.match(/^deleted$/)
    say repo, "#{Cinch::Formatting.format(:Black, '[')}" + format_repo(data) + "#{Cinch::Formatting.format(:Black, ']')} " + format_author(data) + " #{data["action"]} a comment from " + format_issuenumber(data) + ": " + format_issuetitle(data) + " @ " + format_commenturl(data)
  end
end

# {opened,edited,closed,reopened,assigned,unassigned,labeled,unlabeled} issues
# TODO: Consolidate multiple label/assignment events on an issue into a single irc output

def get_issues(data)
  repo = data["repository"]["name"]
  action = data["action"]

  if action.match(/^labeled$/)
    say repo, "#{Cinch::Formatting.format(:Black, '[')}" + format_repo(data) + "#{Cinch::Formatting.format(:Black, ']')} " + format_author(data) + " added label #{data['label']['name']} to " + format_issuenumber(data) + ": " + format_issuetitle(data) + " @ " + format_issueurl(data)

  elsif action.match(/^unlabeled$/)
    say repo, "#{Cinch::Formatting.format(:Black, '[')}" + format_repo(data) + "#{Cinch::Formatting.format(:Black, ']')} " + format_author(data) + " removed label #{data['label']['name']} from " + format_issuenumber(data) + ": " + format_issuetitle(data) + " @ " + format_issueurl(data)

  elsif action.match(/^assigned$/)
    say repo, "#{Cinch::Formatting.format(:Black, '[')}" + format_repo(data) + "#{Cinch::Formatting.format(:Black, ']')} " + format_issueassigner(data) + " assigned " + format_issuenumber(data) + ": " + format_issuetitle(data) + " to " + format_issueassignee(data) + " @ " + format_issueurl(data)

  elsif action.match(/^unassigned$/)
    say repo, "#{Cinch::Formatting.format(:Black, '[')}" + format_repo(data) + "#{Cinch::Formatting.format(:Black, ']')} " + format_issueassigner(data) + " unassigned " + format_issuenumber(data) + ": " + format_issuetitle(data) + " from " + format_issueassignee(data) + " @ " + format_issueurl(data)

  else
    say repo, "#{Cinch::Formatting.format(:Black, '[')}" + format_repo(data) + "#{Cinch::Formatting.format(:Black, ']')} " + format_author(data) + " #{data["action"]} issue " + format_issuenumber(data) + ": " + format_issuetitle(data) + " @ " + format_issueurl(data)

  end
end

# Added Collaborator

def get_member(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Member (Collaborator): Not yet implemented, how pitiful."
end

# Added user to team

def get_membership(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Membership (Team): Not yet implemented, how pitiful."
end

# Github Pages build attempt

def get_page_build(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Github Pages Build: Not yet implemented, how pitiful."
end

# When a private repository is open sourced

def get_public(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Public Publish: Not yet implemented, how pitiful."
end

# {opened,closed,reopened} PRs

def get_pull_request(data)
  repo = data["repository"]["name"]

  say repo, "#{Cinch::Formatting.format(:Black, '[')}" + format_repo(data) + "#{Cinch::Formatting.format(:Black, ']')} " + format_prauthor(data) + " #{data["action"]} pull request " + format_prnumber(data) + ": " + format_prtitle(data) + " (" + format_prhead(data) + " \u{2192} " + format_prbase(data) + ") @ " + format_prurl(data)
end

#  Comment on a Pull Request's unified diff is {created, edited, deleted}

def get_pull_request_review_comment(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Pull Request Diff Comment: Not yet implemented, how pitiful."
end

# {pushed,force-pushed} commits

def get_push(data)
  repo = data["repository"]["name"]

  # sort commits by timestamp
  data["commits"].sort! do |a,b|
    ta = tb = nil
    begin
      ta = DateTime.parse(a["timestamp"])
    rescue ArgumentError
      ta = Time.at(a["timestamp"].to_i)
    end

    begin
      tb = DateTime.parse(b["timestamp"])
    rescue ArgumentError
      tb = Time.at(b["timestamp"].to_i)
    end

    ta <=> tb
  end

  # output first 5 commits
  say repo, "#{Cinch::Formatting.format(:Black, '[')}" + format_repo(data) + "#{Cinch::Formatting.format(:Black, ']')} " + format_author(data) + " pushed #{data["commits"].length} new commit#{data["commits"].count == 1 ? '' : 's'} to " + format_branch(data) + ": " + format_commiturl(data)
  data["commits"][0..4].each do |c|
    message = c["message"]

    if message.include? "\n\n"
      message1, match, message2 = message.rpartition(/\n\n/)
    else
      message1 = message
    end

    say repo, format_repo(data) + "/" + format_branch(data) + " " + format_commit(c) + " " + format_cauthor(c) + ": #{message1}"
  end

  if data["commits"].length-5 > 0
    say repo, format_repo(data) + "/" + format_branch(data) + " ...and #{data["commits"].length-5} more @ " +  + format_commiturl(data)
  end

## Debugging
#  data.inspect
end

# Release published

def get_release(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Release: Not yet implemented, how pitiful."
end

# Repository {created, deleted, made public, made private}

def get_repository(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Repository: Not yet implemented, how pitiful."
end

# Staus of git commit changes

def get_status(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Git commit status: Not yet implemented, how pitiful."
end

# Repo added to team

def get_team_add(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Team Add: Not yet implemented, how pitiful."
end

# Starring a repository, not watching. Explanation @ https://developer.github.com/changes/2012-09-05-watcher-api/

def get_watch(data)
  halt 501, "Not yet implemented, how pitiful."
  puts "Watch: Not yet implemented, how pitiful."
end

#############
# Webserver #
#############

configure do
  set :bind, $config["http"]["host"]
  set :port, $config["http"]["port"]
  set :logging, false
  set :lock, true
end

get "/" do
  "GitBot lives here. Direct your hooks to /github."
end

post "/github" do
  request.body.rewind
  payload_body = request.body.read
  verify_signature(payload_body) if $config["github"].key?(:secret)
  p params[:payload]
  data = JSON.parse(params[:payload])
  event = request.env['HTTP_X_GITHUB_EVENT'].to_sym
  return halt 202, "Ignored: #{event}" if ignored?(event, data)
  send "get_#{event}", data
  return halt 200
end
